AWSTemplateFormatVersion: '2010-09-09'

Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    PublicSubnet1:
      CIDR: 10.0.0.0/24
    PublicSubnet2:
      CIDR: 10.0.1.0/24
    PrivateSubnet1:
      CIDR: 10.0.128.0/24
    PrivateSubnet2:
      CIDR: 10.0.129.0/24

Parameters:
  AppName:
    Type: String
    Default: MyApp
    Description: A name for the application

Resources:
  WebContentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref AppName

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties: 
      CloudFrontOriginAccessIdentityConfig: 
        Comment: !Ref AWS::StackName

  WebContentBucketPolicy: 
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref WebContentBucket
      PolicyDocument: 
        Statement: 
          - Action: ["s3:GetObject"]
            Effect: "Allow"
            Resource: !Sub "arn:aws:s3:::${WebContentBucket}/*"
            Principal: 
              CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId

  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: !FindInMap 
        - SubnetConfig
        - VPC
        - CIDR
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-VPC'
        - Key: Application
          Value: !Ref 'AWS::StackName'
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select 
        - 0
        - 'Fn::GetAZs': !Ref 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: !FindInMap 
        - SubnetConfig
        - PublicSubnet1
        - CIDR
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSubnet1'
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select 
        - 1
        - 'Fn::GetAZs': !Ref 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: !FindInMap 
        - SubnetConfig
        - PublicSubnet2
        - CIDR
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSubnet2'
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select 
        - 0
        - 'Fn::GetAZs': !Ref 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: !FindInMap 
        - SubnetConfig
        - PrivateSubnet1
        - CIDR
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSubnet1'
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select 
        - 1
        - 'Fn::GetAZs': !Ref 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: !FindInMap 
        - SubnetConfig
        - PrivateSubnet2
        - CIDR
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSubnet2'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-InternetGateway'
        - Key: Application
          Value: !Ref 'AWS::StackName'
  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  NatGateway1:
    DependsOn: GatewayToInternet
    Type: 'AWS::EC2::NatGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-x86NatGateway'
      AllocationId: !GetAtt NATEIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
  NatGateway2:
    DependsOn: GatewayToInternet
    Type: 'AWS::EC2::NatGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-x86NatGateway'
      AllocationId: !GetAtt NATEIP2.AllocationId
      SubnetId: !Ref PublicSubnet2
  NATEIP1:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  NATEIP2:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicRouteTable'
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PrivateRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateRouteTable1
  PrivateRouteTable2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateRouteTable2
  PrivateRoute1:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
  PrivateRoute2:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1
  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2
  WebSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allows public access to port 80
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicHttp'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  PrivateHttpSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub 'Only allows access to port 5000 from ${WebSecurityGroup}'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateHttp'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          SourceSecurityGroupId: !GetAtt WebSecurityGroup.GroupId

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        HttpVersion: http2
        Origins:
          - Id: staticcontent
            DomainName: !GetAtt WebContentBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OriginAccessIdentity}
          - Id: dynamiccontent
            DomainName: !GetAtt LoadBalancer.DNSName
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
        DefaultRootObject: index.html
        CacheBehaviors:
          - Compress: true
            ForwardedValues:
              QueryString: true
            PathPattern: api/*
            TargetOriginId: dynamiccontent
            ViewerProtocolPolicy: redirect-to-https
        CustomErrorResponses: # Necesary to support Angular SPA Routing
          - ErrorCode: 403
            ErrorCachingMinTTL: 86400
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ErrorCachingMinTTL: 86400
            ResponseCode: 200
            ResponsePagePath: /index.html
        DefaultCacheBehavior:
          Compress: true
          ForwardedValues:
            QueryString: false
          TargetOriginId: staticcontent
          ViewerProtocolPolicy: redirect-to-https
        ViewerCertificate:
          CloudFrontDefaultCertificate: true


  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      SecurityGroups:
      - !Ref WebSecurityGroup
      Type: application
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-LoadBalancer          
        - Key: Application
          Value: !Ref 'AWS::StackName'

  ImageRepository:
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: !Ref AWS::StackName

  #ECSTaskExecutionRole
Outputs:
  ECRUri:
    Description: The ECR repository URI to use for images
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ImageRepository}
  LoadBalancerUrl:
    Description: The URL for our Load Balancer
    Value: !Sub http://${LoadBalancer.DNSName}
  DistributionUrl:
    Description: The URL for our Web app
    Value: !Sub https://${CloudFrontDistribution.DomainName}
